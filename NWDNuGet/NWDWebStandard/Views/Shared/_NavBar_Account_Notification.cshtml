@using NWDWebRuntime.Models
@using NWDWebRuntime.Tools
@model NWDNotificationFilteredLists
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<a class="nav-link  @if (Model.IsUnreadNotifications()){@Html.Raw("notification-indicator notification-indicator-primary")}  px-0 fa-icon-wait" id="navbarDropdownNotification" role="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-hide-on-body-scroll="data-hide-on-body-scroll">
    <div class="" data-bs-toggle="tooltip" data-bs-placement="top" title="Notifications">
        <span class="fas fa-bell" data-fa-transform="shrink-6" style="font-size: 33px;"></span>
    </div>
</a>
<div class="dropdown-menu dropdown-caret dropdown-menu-end dropdown-menu-card dropdown-menu-notification dropdown-caret-bg" aria-labelledby="navbarDropdownNotification">
    <div class="card card-notification shadow-none">
        <div class="card-header">
            <div class="row justify-content-between align-items-center">
                <div class="col-auto">
                    <h6 class="card-header-title mb-0">Notifications</h6>
                </div>
                <div class="col-auto ps-0 ps-sm-3">
                    <button class="btn btn-link fw-normal btn-sm" onclick="getRequestAndReplaceContentWithoutHideShow('NotificationsBody','@Url.Action("MarkAllAsRead", "NWDNotification")')">
                        Mark all as read
                    </button>
                </div>
            </div>
        </div>
        <div>
            <div class=" scrollbar-overlay" style="max-height: 10rem" id="NotificationPanelScrollable">
                <div class="list-group list-group-flush fw-normal fs--1">
                    <div class="list-group-title border-bottom">TODAY</div>
                    <div class="list-group-item">
                        @foreach (NWDNotification tNotification in Model.TodaysNotifications)
                        {
                            <a class="notification notification-flush @if (!tNotification.Read){@Html.Raw("notification-unread");}"

                               @if (!string.IsNullOrEmpty(tNotification.Link))
                               {
                                   @Html.Raw("href='" + (tNotification).Link + "' onclick =\"$.get('" + Url.Action("MarkAsRead", "NWDNotification", new { tNotification.Reference }) + "')\"")
                                   ;
                               }
                               else if (!string.IsNullOrEmpty(tNotification.ModalId))
                               {
                                   @Html.Raw("data-bs-toggle=\"modal\" data-bs-target=\"#" + (tNotification).ModalId + "\");")
                               }
                               else
                               {
                                   @Html.Raw("onclick=\"getRequestAndReplaceContent('NotificationsBody','" + @Url.Action("MarkAsRead", "NWDNotification", new { tNotification.Reference }) + "')\";")
                                   ;
                               }>

                                <div class="notification-body">
                                    <p class="mb-1"> @tNotification.Body</p>
                                    <span class="notification-time">
                                        <span class="@tNotification.Icon me-2" role="img" aria-label="Icon"></span>
                                        @TimeTools.GetStringTimeAgo(tNotification.CreationDate)
                                    </span>
                                </div>
                            </a>
                        }
                    </div>
                    @if (Model.EarliersNotifications.Any())
                    {
                        <div class="list-group-title border-bottom">EARLIER</div>
                        <div class="list-group-item">
                            @foreach (NWDNotification tNotification in Model.EarliersNotifications)
                            {
                                <a class="notification notification-flush @if (!tNotification.Read){@Html.Raw("notification-unread");}"

                                   @if (!string.IsNullOrEmpty(tNotification.Link))
                                   {
                                       @Html.Raw("href='" + (tNotification).Link + "' onclick =\"$.get('" + Url.Action("MarkAsRead", "NWDNotification", new { tNotification.Reference }) + "')\"")
                                       ;
                                   }
                                   else if (!string.IsNullOrEmpty(tNotification.ModalId))
                                   {
                                       @Html.Raw("data-bs-toggle=\"modal\" data-bs-target=\"#" + (tNotification).ModalId + "\");")
                                   }
                                   else
                                   {
                                       @Html.Raw("onclick=\"getRequestAndReplaceContent('NotificationsBody','" + @Url.Action("MarkAsRead", "NWDNotification", new { tNotification.Reference }) + "')\";")
                                   }>

                                    <div class="notification-body">
                                        <p class="mb-1"> @tNotification.Body</p>
                                        <span class="notification-time">
                                            <span class="@tNotification.Icon me-2" role="img" aria-label="Icon"></span>
                                            @TimeTools.GetStringTimeAgo(tNotification.CreationDate)
                                        </span>
                                    </div>
                                </a>
                            }
                        </div>
                    }
                </div>

            </div>
        </div>
    </div>
</div>


@foreach (NWDNotification tNotification in Model.GetModalNotification())
{
    <script>
    $(document).ready(function () {
        $('#@tNotification.ModalId').on('show.bs.modal', function (e) {
            console.log("show.bs.modal")
            $.get('@Url.Action("MarkAsRead", "NWDNotification", new { tNotification.Reference })')
        })});
    </script>
}

<script>
    new SimpleBar(document.getElementById('NotificationPanelScrollable'));
</script>